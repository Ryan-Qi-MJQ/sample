/*

#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/robot_trajectory/robot_trajectory.h>


int main(int argc, char **argv)
{
	ros::init(argc, argv, "test_cartesian_path", ros::init_options::AnonymousName);

	// 创建一个异步的自旋线程（spinning thread）
	ros::AsyncSpinner spinner(1);
	spinner.start();

	moveit::planning_interface::MoveGroupInterface move_group("ur10_neiqian");


	// 设置初始位置
    move_group.setStartState(*move_group.getCurrentState());

	geometry_msgs::Pose target_pose;
	target_pose.orientation.w = 1;
	target_pose.position.x = 1;
	target_pose.position.y = 0;
	target_pose.position.z = 1.0;
	std::vector<geometry_msgs::Pose> waypoints;
	waypoints.push_back(target_pose);
	
	// 笛卡尔空间下的路径规划
	//double moveit::planning_interface::MoveGroup::computeCartesianPath(
	//    const std::vector< geometry_msgs::Pose > & 	waypoints, //路径点
	//    double  eef_step,//末端最大步距
	//    double  jump_threshold,//机械臂最小移动距离，设置0.0则忽略检查
	//    moveit_msgs::RobotTrajectory &  trajectory,//计算返回路径
	//    const moveit_msgs::Constraints &  path_constraints,//路径约束
	//    bool  avoid_collisions = true,//是否检测碰撞
	//    moveit_msgs::MoveItErrorCodes *  error_code = NULL //返回错误代码
	//)
	moveit_msgs::RobotTrajectory trajectory;
	const double jump_threshold = 0.0;
	const double eef_step = 0.01;
	double fraction = move_group.computeCartesianPath(waypoints, eef_step, jump_threshold, trajectory);


	// 生成机械臂的运动规划数据
	moveit::planning_interface::MoveGroupInterface::Plan plan;
	plan.trajectory_ = trajectory;

	// 执行运动
	move_group.execute(plan);

	ros::shutdown(); 
	return 0;
}
*/



#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>
#include <moveit/planning_request_adapter/planning_request_adapter.h>
#include <moveit/trajectory_processing/iterative_time_parameterization.h>
#include <geometry_msgs/PointStamped.h>

int main(int argc, char **argv)
{
	ros::init(argc, argv, "test_cartesian_path");
	ros::NodeHandle node_handle;
	ros::AsyncSpinner spinner(1);
	spinner.start();
	moveit::planning_interface::MoveGroupInterface group("ur10_neiqian");
	moveit::planning_interface::MoveItErrorCode success;

	//设置初始位置
	//group.setStartState(*group.getCurrentState());

	group.setNamedTarget("forward");
	group.move();
	sleep(2);

	//设置运动路径
	std::vector<geometry_msgs::Pose> waypoints;
	geometry_msgs::Pose target_pose1;
	target_pose1.orientation.w = 0.707388;
	target_pose1.orientation.x = 0.000000;
	target_pose1.orientation.y = 0.706825;
	target_pose1.orientation.z = 0.000000;
	target_pose1.position.x = 1.2;
	target_pose1.position.y = 0.3;
	target_pose1.position.z = 1.25;
	waypoints.push_back(target_pose1);


	geometry_msgs::Pose target_pose3;
	target_pose3.orientation.w = 0.707388;
	target_pose3.orientation.x = 0.000000;
	target_pose3.orientation.y = 0.706825;
	target_pose3.orientation.z = 0.000000;
	target_pose3.position.x = 1.3;
	target_pose3.position.y = 0.3;
	target_pose3.position.z = 1.25;
	waypoints.push_back(target_pose3);



	geometry_msgs::Pose target_pose4;
	target_pose4.orientation.w = 0.707388;
	target_pose4.orientation.x = 0.000000;
	target_pose4.orientation.y = 0.706825;
	target_pose4.orientation.z = 0.000000;
	target_pose4.position.x = 1.2;
	target_pose4.position.y = 0.3;
	target_pose4.position.z = 1.25;
	waypoints.push_back(target_pose4);

	geometry_msgs::Pose target_pose5;
	target_pose5.orientation.w = 0.707388;
	target_pose5.orientation.x = 0.000000;
	target_pose5.orientation.y = 0.706825;
	target_pose5.orientation.z = 0.000000;
	target_pose5.position.x = 1.2;
	target_pose5.position.y = -0.3;
	target_pose5.position.z = 1.25;
	waypoints.push_back(target_pose5);
	
	
	geometry_msgs::Pose target_pose2;
	target_pose2.orientation.w = 0.707388;
	target_pose2.orientation.x = 0;
	target_pose2.orientation.y = 0.706825;
	target_pose2.orientation.z = 0;
	target_pose2.position.x = 1.3;
	target_pose2.position.y = -0.3;
	target_pose2.position.z = 1.25;
	waypoints.push_back(target_pose2);

	geometry_msgs::Pose target_pose6;
	target_pose6.orientation.w = 0.707388;
	target_pose6.orientation.x = 0;
	target_pose6.orientation.y = 0.706825;
	target_pose6.orientation.z = 0;
	target_pose6.position.x = 1.2;
	target_pose6.position.y = -0.3;
	target_pose6.position.z = 1.25;
	waypoints.push_back(target_pose6);

	geometry_msgs::Pose target_pose7;
	target_pose7.orientation.w = 0.707388;
	target_pose7.orientation.x = 0;
	target_pose7.orientation.y = 0.706825;
	target_pose7.orientation.z = 0;
	target_pose7.position.x = 1.2;
	target_pose7.position.y = -0.3;
	target_pose7.position.z = 1;
	waypoints.push_back(target_pose7);

	geometry_msgs::Pose target_pose8;
	target_pose8.orientation.w = 0.707388;
	target_pose8.orientation.x = 0;
	target_pose8.orientation.y = 0.706825;
	target_pose8.orientation.z = 0;
	target_pose8.position.x = 1.3;
	target_pose8.position.y = -0.3;
	target_pose8.position.z = 1;
	waypoints.push_back(target_pose8);

	geometry_msgs::Pose target_pose9;
	target_pose9.orientation.w = 0.707388;
	target_pose9.orientation.x = 0;
	target_pose9.orientation.y = 0.706825;
	target_pose9.orientation.z = 0;
	target_pose9.position.x = 1.2;
	target_pose9.position.y = -0.3;
	target_pose9.position.z = 1;
	waypoints.push_back(target_pose9);

	geometry_msgs::Pose target_pose10;
	target_pose10.orientation.w = 0.707388;
	target_pose10.orientation.x = 0;
	target_pose10.orientation.y = 0.706825;
	target_pose10.orientation.z = 0;
	target_pose10.position.x = 1.2;
	target_pose10.position.y = 0.3;
	target_pose10.position.z = 1;
	waypoints.push_back(target_pose10);

	geometry_msgs::Pose target_pose11;
	target_pose11.orientation.w = 0.707388;
	target_pose11.orientation.x = 0;
	target_pose11.orientation.y = 0.706825;
	target_pose11.orientation.z = 0;
	target_pose11.position.x = 1.3;
	target_pose11.position.y = 0.3;
	target_pose11.position.z = 1;
	waypoints.push_back(target_pose11);

	geometry_msgs::Pose target_pose12;
	target_pose12.orientation.w = 0.707388;
	target_pose12.orientation.x = 0;
	target_pose12.orientation.y = 0.706825;
	target_pose12.orientation.z = 0;
	target_pose12.position.x = 0.7;
	target_pose12.position.y = 0;
	target_pose12.position.z = 0.7;
	waypoints.push_back(target_pose12);


	//进行运动规划
	moveit_msgs::RobotTrajectory trajectory_msg;
	double fraction = group.computeCartesianPath( waypoints,
												  0.01, // eef_step,
												  0.0,  // jump_threshold
												  trajectory_msg,
											  false);

//	ROS_INFO("Visualizing plan (cartesian path) (%.2f%% acheived)",fraction * 100.0);
//	group.clearPathConstraints();
//	// The trajectory needs to be modified so it will include velocities as well.
//	// First to create a RobotTrajectory object
//	robot_trajectory::RobotTrajectory rt(group.getCurrentState()->getRobotModel(), "ur10_neiqian");
//	// Second get a RobotTrajectory from trajectory
//	rt.setRobotTrajectoryMsg(*group.getCurrentState(), trajectory_msg);
//	// Thrid create a IterativeParabolicTimeParameterization object
//	trajectory_processing::IterativeParabolicTimeParameterization iptp;
//	// Fourth compute computeTimeStamps
//	bool ItSuccess = iptp.computeTimeStamps(rt);
//	ROS_INFO("Computed time stamp %s",ItSuccess?"SUCCEDED":"FAILED");
//	// Get RobotTrajectory_msg from RobotTrajectory
//	rt.getRobotTrajectoryMsg(trajectory_msg);



	//输出运动
	moveit::planning_interface::MoveGroupInterface::Plan plan;
	plan.trajectory_ = trajectory_msg;
	group.execute(plan);

	ros::shutdown();
	return 0;
}






/*


#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

int main(int argc, char **argv)
{
    ros::init(argc, argv, "test_cartesian_path");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();
    moveit::planning_interface::MoveGroupInterface group("ur10_neiqian");
    moveit::planning_interface::MoveItErrorCode success;

    //设置初始位置
    group.setStartState(*group.getCurrentState());

    //设置抓取目标点
    geometry_msgs::Pose target_pose;
    //末端姿态四元数
    target_pose.orientation.w = 0.707388;
    target_pose.orientation.x = 0;
    target_pose.orientation.y = 0.706825;
    target_pose.orientation.z = 0;
    //末端姿态三维坐标
    target_pose.position.x = 0.9;
    target_pose.position.y = 0.3;
    target_pose.position.z = 1;
    sleep(3);

 
    //进行运动规划
    group.setPoseTarget(target_pose);
    moveit::planning_interface::MoveGroupInterface::Plan plan;
    success = group.plan(plan);


    //运动规划输出
    ROS_INFO("Visualizing plan (stateCatch pose) %s",success == moveit_msgs::MoveItErrorCodes::SUCCESS ? "SUCCESS" : "FAILED");
    if (success  == moveit_msgs::MoveItErrorCodes::SUCCESS)  group.execute(plan);

    ros::shutdown();
    return 0;
}

*/
